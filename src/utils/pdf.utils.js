const Handlebars = require('handlebars');
const puppeteer = require('puppeteer');

Handlebars.registerHelper('ifCond', function(v1, operator, v2, options) {
	switch (operator) {
	case '==':
		return v1 == v2 ? options.fn(this) : options.inverse(this);
	case '===':
		return v1 === v2 ? options.fn(this) : options.inverse(this);
	case '!=':
		return v1 != v2 ? options.fn(this) : options.inverse(this);
	case '!==':
		return v1 !== v2 ? options.fn(this) : options.inverse(this);
	case '<':
		return v1 < v2 ? options.fn(this) : options.inverse(this);
	case '<=':
		return v1 <= v2 ? options.fn(this) : options.inverse(this);
	case '>':
		return v1 > v2 ? options.fn(this) : options.inverse(this);
	case '>=':
		return v1 >= v2 ? options.fn(this) : options.inverse(this);
	case '&&':
		return v1 && v2 ? options.fn(this) : options.inverse(this);
	case '||':
		return v1 || v2 ? options.fn(this) : options.inverse(this);
	default:
		return options.inverse(this);
	}
});

const create = async function(document, options) {
	// return new Promise((resolve, reject) => {
	if (!document || !document.html || !document.data) {
		// reject(new Error('Some, or all, options are missing.'));
		return (new Error('Some, or all, options are missing.'));
	}
	// Compiles a template
	const html = Handlebars.compile(document.html)(document.data);
	// const pdfPromise = pdf.create(html, options);
	const browser = await puppeteer.launch({
		headless: 'new',
		args: [
			'--disable-gpu',
			'--disable-dev-shm-usage',
			'--disable-setuid-sandbox',
			'--no-sandbox',
		],
	});
	const page = await browser.newPage();
	await page.setContent(html);
	await page.emulateMediaType('screen');
	const pdf = await page.pdf(options);
	await browser.close();

	return pdf;

	// Create PDF from html template generated by handlebars
	// Output will be PDF file

	// switch (document.type) {
	// case 'buffer':
	// 	pdfPromise.toBuffer((err, res) => {
	// 		if (!err) resolve(res);
	// 		else reject(err);
	// 	});
	// 	break;

	// case 'stream':
	// 	pdfPromise.toStream((err, res) => {
	// 		if (!err) resolve(res);
	// 		else reject(err);
	// 	});
	// 	break;

	// default:
	// 	pdfPromise.toFile(document.path, (err, res) => {
	// 		if (!err) resolve(res);
	// 		else reject(err);
	// 	});
	// 	break;
	// }
	// });
};

module.exports.create = create;
